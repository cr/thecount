extend layout

block content
  .row
    .col-md-6
      h2
        img(src='#{appData.icons["128"]}', width=32, height=32)
        if appData.name['en-US']
          span #{appData.name['en-US']}
        else
          span #{appData.name[Object.keys(appData.name)[0]]}
    .col-md-6(style='text-align: right')
      h3
        if appData.is_packaged
          span.glyphicon.glyphicon-file
        else
          span.glyphicon.glyphicon-cloud

        if appData.is_offline
          span.glyphicon.glyphicon-plane

  if appData.is_packaged
    button(data-package-manifest-url='#{appData.manifest_url}', class='btn btn-primary installButton') Install Packaged
    span#progress
    span
      a(href='#{appData.miniManifest.package_path}', class='btn btn-primary')
        span.glyphicon.glyphicon-file
        span download package (#{numeral(appData.miniManifest.size).format('0,0')} bytes)
  else
    button(data-manifest-url='#{appData.manifest_url}', class='btn btn-primary installButton') Install Hosted
    span#progress

  span
    a(target='_blank',href='http://marketplace.firefox.com/app/#{appData.slug}',class='btn btn-primary')
      span.glyphicon.glyphicon-share-alt
      span marketplace

  if appData.is_packaged
    div.alert.alert-info
      | note: to install packaged apps from thecount, go to 
      tt about:config 
      | and add this host to 
      tt dom.mozApps.signed_apps_installable_from

  hr

  p !{appData.description['en-US']}

  .row
    each preview in appData.previews
      div(class='col-xs-6 col-md-3')
        a(href="#", class="thumbnail")
          img(src='#{preview.thumbnail_url}')

  hr

  h3 #{appData.author}

  div
    each type in appData.device_types
      span.label.label-primary #{type}
      span &nbsp;

    each category in appData.categories
      span.label.label-default #{category}
      span &nbsp;

  h4
    if appData.ratings.average >= 5
      span.glyphicon.glyphicon-star
    else
      span.glyphicon.glyphicon-star-empty
    if appData.ratings.average > 4
      span.glyphicon.glyphicon-star
    else
      span.glyphicon.glyphicon-star-empty
    if appData.ratings.average > 3
      span.glyphicon.glyphicon-star
    else
      span.glyphicon.glyphicon-star-empty
    if appData.ratings.average > 2
      span.glyphicon.glyphicon-star
    else
      span.glyphicon.glyphicon-star-empty
    if appData.ratings.average > 1
      span.glyphicon.glyphicon-star
    else
      span.glyphicon.glyphicon-star-empty

    span (#{appData.ratings.count})

  p
    span.glyphicon.glyphicon-time
    span created #{appData.created} (#{Math.round((Date.now() - Date.parse(appData.created)) / (24*60*60*1000))} days ago)

  p
    span.glyphicon.glyphicon-time
    span reviewed #{appData.reviewed}  (#{Math.round((Date.now() - Date.parse(appData.reviewed)) / (24*60*60*1000))} days ago)

  if appData.manifest
    h3 app manifest
    pre #{JSON.stringify(appData.manifest,null,2)}

  if appData.miniManifest
    h3 app mini manifest
    pre #{JSON.stringify(appData.miniManifest,null,2)}

  if appData.appcache_manifest
    h3 appcache manifest
    if appData.appcache_manifest.error
      pre ERROR retrieving appcache manifest
    else
      pre #{appData.appcache_manifest}
